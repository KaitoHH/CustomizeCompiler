
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Syntax;

import Lexer.Token.Token;
import Syntax.AST.ASTRoot;
import Syntax.AST.Basic.Char;
import Syntax.AST.Basic.Id;
import Syntax.AST.Basic.Int;
import Syntax.AST.Basic.Real;
import Syntax.AST.Expressions.Arith.*;
import Syntax.AST.Expressions.Cast;
import Syntax.AST.Expressions.Expr;
import Syntax.AST.Expressions.Logic.*;
import Syntax.AST.Statements.*;
import Syntax.AST.Type;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\005\004\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\007\000\002" +
    "\013\007\000\002\010\006\000\002\007\005\000\002\011" +
    "\007\000\002\012\011\000\002\014\011\000\002\006\003" +
    "\000\002\006\004\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\005\000\002\017\003\000\002\017" +
    "\005\000\002\017\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\021\003\000\002\021\005\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\023\004\000\002\023\004\000\002\023\003" +
    "\000\002\024\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\026\003\025\004\024\010\007\011\030\012" +
    "\016\014\006\025\015\027\012\041\026\042\010\001\002" +
    "\000\034\002\ufffc\003\ufffc\004\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\014\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\041\ufffc" +
    "\042\ufffc\001\002\000\034\002\ufffa\003\ufffa\004\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\027\ufffa\041\ufffa\042\ufffa\001\002\000\006\007\uffed\025" +
    "\uffed\001\002\000\006\007\uffeb\025\uffeb\001\002\000\004" +
    "\006\142\001\002\000\004\025\140\001\002\000\004\006" +
    "\132\001\002\000\004\002\131\001\002\000\034\002\uffef" +
    "\003\uffef\004\uffef\010\uffef\011\uffef\012\uffef\014\uffef\023" +
    "\uffef\024\uffef\025\uffef\027\uffef\041\uffef\042\uffef\001\002" +
    "\000\004\013\126\001\002\000\026\003\025\004\024\010" +
    "\007\011\030\012\016\014\006\025\015\027\012\041\026" +
    "\042\010\001\002\000\034\002\ufff7\003\ufff7\004\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\027\ufff7\041\ufff7\042\ufff7\001\002\000\034\002\ufff8\003" +
    "\ufff8\004\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\027\ufff8\041\ufff8\042\ufff8\001\002\000" +
    "\030\002\001\003\025\004\024\010\007\011\030\012\016" +
    "\014\006\025\015\027\012\041\026\042\010\001\002\000" +
    "\034\002\ufff9\003\ufff9\004\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\014\ufff9\023\ufff9\024\ufff9\025\ufff9\027\ufff9\041\ufff9\042" +
    "\ufff9\001\002\000\034\002\ufffb\003\ufffb\004\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\014\ufffb\023\ufffb\024\ufffb\025\ufffb\027" +
    "\ufffb\041\ufffb\042\ufffb\001\002\000\004\006\035\001\002" +
    "\000\004\015\034\001\002\000\006\007\uffec\025\uffec\001" +
    "\002\000\032\002\ufffd\003\ufffd\004\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\014\ufffd\023\ufffd\025\ufffd\027\ufffd\041\ufffd\042" +
    "\ufffd\001\002\000\026\003\025\004\024\010\007\011\030" +
    "\012\016\014\006\025\015\027\012\041\026\042\010\001" +
    "\002\000\030\003\025\004\024\010\007\011\030\012\016" +
    "\014\006\023\032\025\015\027\012\041\026\042\010\001" +
    "\002\000\034\002\uffff\003\uffff\004\uffff\010\uffff\011\uffff" +
    "\012\uffff\014\uffff\023\uffff\024\uffff\025\uffff\027\uffff\041" +
    "\uffff\042\uffff\001\002\000\032\002\ufffe\003\ufffe\004\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\014\ufffe\023\ufffe\025\ufffe\027" +
    "\ufffe\041\ufffe\042\ufffe\001\002\000\034\002\uffee\003\uffee" +
    "\004\uffee\010\uffee\011\uffee\012\uffee\014\uffee\023\uffee\024" +
    "\uffee\025\uffee\027\uffee\041\uffee\042\uffee\001\002\000\020" +
    "\006\042\016\036\025\046\037\052\044\051\045\037\046" +
    "\045\001\002\000\020\006\042\016\036\025\046\037\052" +
    "\044\051\045\037\046\045\001\002\000\040\005\uffd1\007" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\034\uffd1\035\uffd1\040\uffd1\043" +
    "\uffd1\001\002\000\012\007\uffea\015\uffea\031\uffea\040\111" +
    "\001\002\000\006\007\115\031\107\001\002\000\026\006" +
    "\042\010\007\014\006\016\036\025\046\037\052\041\026" +
    "\044\051\045\037\046\045\001\002\000\040\005\uffde\007" +
    "\uffde\015\uffde\016\uffde\017\066\020\uffde\022\uffde\026\uffde" +
    "\030\065\031\uffde\032\067\034\uffde\035\uffde\040\uffde\043" +
    "\uffde\001\002\000\040\005\uffdb\007\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\022\uffdb\026\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\034\uffdb\035\uffdb\040\uffdb\043\uffdb\001\002\000\040" +
    "\005\uffd0\007\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\022" +
    "\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0" +
    "\040\uffd0\043\uffd0\001\002\000\040\005\uffd3\007\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3\026\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\034\uffd3\035\uffd3\040\uffd3\043\uffd3\001" +
    "\002\000\040\005\uffd5\007\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\022\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\034" +
    "\uffd5\035\uffd5\040\uffd5\043\uffd5\001\002\000\016\007\uffe8" +
    "\015\uffe8\031\uffe8\035\100\040\uffe8\043\101\001\002\000" +
    "\040\005\uffd2\007\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\022\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\034\uffd2\035" +
    "\uffd2\040\uffd2\043\uffd2\001\002\000\020\006\042\016\036" +
    "\025\046\037\052\044\051\045\037\046\045\001\002\000" +
    "\032\005\060\007\uffdf\015\uffdf\016\061\020\056\022\057" +
    "\026\062\031\uffdf\034\055\035\uffdf\040\uffdf\043\uffdf\001" +
    "\002\000\016\007\uffe6\015\uffe6\031\uffe6\035\uffe6\040\uffe6" +
    "\043\uffe6\001\002\000\020\006\042\016\036\025\046\037" +
    "\052\044\051\045\037\046\045\001\002\000\020\006\042" +
    "\016\036\025\046\037\052\044\051\045\037\046\045\001" +
    "\002\000\020\006\042\016\036\025\046\037\052\044\051" +
    "\045\037\046\045\001\002\000\020\006\042\016\036\025" +
    "\046\037\052\044\051\045\037\046\045\001\002\000\020" +
    "\006\042\016\036\025\046\037\052\044\051\045\037\046" +
    "\045\001\002\000\020\006\042\016\036\025\046\037\052" +
    "\044\051\045\037\046\045\001\002\000\022\005\060\007" +
    "\uffe1\015\uffe1\016\061\031\uffe1\035\uffe1\040\uffe1\043\uffe1" +
    "\001\002\000\040\005\uffdd\007\uffdd\015\uffdd\016\uffdd\017" +
    "\066\020\uffdd\022\uffdd\026\uffdd\030\065\031\uffdd\032\067" +
    "\034\uffdd\035\uffdd\040\uffdd\043\uffdd\001\002\000\020\006" +
    "\042\016\036\025\046\037\052\044\051\045\037\046\045" +
    "\001\002\000\020\006\042\016\036\025\046\037\052\044" +
    "\051\045\037\046\045\001\002\000\020\006\042\016\036" +
    "\025\046\037\052\044\051\045\037\046\045\001\002\000" +
    "\040\005\uffda\007\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\022\uffda\026\uffda\030\uffda\031\uffda\032\uffda\034\uffda\035" +
    "\uffda\040\uffda\043\uffda\001\002\000\040\005\uffd9\007\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\040\uffd9\043\uffd9" +
    "\001\002\000\040\005\uffd8\007\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\022\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\034\uffd8\035\uffd8\040\uffd8\043\uffd8\001\002\000\040\005" +
    "\uffdc\007\uffdc\015\uffdc\016\uffdc\017\066\020\uffdc\022\uffdc" +
    "\026\uffdc\030\065\031\uffdc\032\067\034\uffdc\035\uffdc\040" +
    "\uffdc\043\uffdc\001\002\000\022\005\060\007\uffe2\015\uffe2" +
    "\016\061\031\uffe2\035\uffe2\040\uffe2\043\uffe2\001\002\000" +
    "\022\005\060\007\uffe0\015\uffe0\016\061\031\uffe0\035\uffe0" +
    "\040\uffe0\043\uffe0\001\002\000\022\005\060\007\uffe3\015" +
    "\uffe3\016\061\031\uffe3\035\uffe3\040\uffe3\043\uffe3\001\002" +
    "\000\040\005\uffd7\007\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\022\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\034\uffd7" +
    "\035\uffd7\040\uffd7\043\uffd7\001\002\000\020\006\042\016" +
    "\036\025\046\037\052\044\051\045\037\046\045\001\002" +
    "\000\020\006\042\016\036\025\046\037\052\044\051\045" +
    "\037\046\045\001\002\000\016\007\uffe4\015\uffe4\031\uffe4" +
    "\035\uffe4\040\uffe4\043\uffe4\001\002\000\016\007\uffe5\015" +
    "\uffe5\031\uffe5\035\uffe5\040\uffe5\043\uffe5\001\002\000\004" +
    "\007\113\001\002\000\006\007\106\031\107\001\002\000" +
    "\040\005\uffd4\007\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\022\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\035" +
    "\uffd4\040\uffd4\043\uffd4\001\002\000\020\006\042\016\036" +
    "\025\046\037\052\044\051\045\037\046\045\001\002\000" +
    "\012\007\uffe9\015\uffe9\031\uffe9\040\111\001\002\000\020" +
    "\006\042\016\036\025\046\037\052\044\051\045\037\046" +
    "\045\001\002\000\016\007\uffe7\015\uffe7\031\uffe7\035\100" +
    "\040\uffe7\043\101\001\002\000\014\006\042\025\046\044" +
    "\051\045\037\046\045\001\002\000\040\005\uffcf\007\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf\026\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf\040\uffcf\043\uffcf" +
    "\001\002\000\004\015\116\001\002\000\034\002\ufff6\003" +
    "\ufff6\004\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\027\ufff6\041\ufff6\042\ufff6\001\002\000" +
    "\040\005\uffd6\007\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\022\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035" +
    "\uffd6\040\uffd6\043\uffd6\001\002\000\004\042\121\001\002" +
    "\000\004\006\122\001\002\000\020\006\042\016\036\025" +
    "\046\037\052\044\051\045\037\046\045\001\002\000\006" +
    "\007\124\031\107\001\002\000\004\015\125\001\002\000" +
    "\034\002\ufff0\003\ufff0\004\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\014\ufff0\023\ufff0\024\ufff0\025\ufff0\027\ufff0\041\ufff0\042" +
    "\ufff0\001\002\000\020\006\042\016\036\025\046\037\052" +
    "\044\051\045\037\046\045\001\002\000\006\015\130\031" +
    "\107\001\002\000\034\002\ufff4\003\ufff4\004\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\014\ufff4\023\ufff4\024\ufff4\025\ufff4\027" +
    "\ufff4\041\ufff4\042\ufff4\001\002\000\004\002\000\001\002" +
    "\000\020\006\042\016\036\025\046\037\052\044\051\045" +
    "\037\046\045\001\002\000\006\007\134\031\107\001\002" +
    "\000\026\003\025\004\024\010\007\011\030\012\016\014" +
    "\006\025\015\027\012\041\026\042\010\001\002\000\034" +
    "\002\ufff2\003\ufff2\004\ufff2\010\ufff2\011\ufff2\012\ufff2\014" +
    "\ufff2\023\ufff2\024\136\025\ufff2\027\ufff2\041\ufff2\042\ufff2" +
    "\001\002\000\026\003\025\004\024\010\007\011\030\012" +
    "\016\014\006\025\015\027\012\041\026\042\010\001\002" +
    "\000\034\002\ufff1\003\ufff1\004\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\014\ufff1\023\ufff1\024\ufff1\025\ufff1\027\ufff1\041\ufff1" +
    "\042\ufff1\001\002\000\004\015\141\001\002\000\034\002" +
    "\ufff3\003\ufff3\004\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\027\ufff3\041\ufff3\042\ufff3\001" +
    "\002\000\020\006\042\016\036\025\046\037\052\044\051" +
    "\045\037\046\045\001\002\000\006\007\144\031\107\001" +
    "\002\000\026\003\025\004\024\010\007\011\030\012\016" +
    "\014\006\025\015\027\012\041\026\042\010\001\002\000" +
    "\034\002\ufff5\003\ufff5\004\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\014\ufff5\023\ufff5\024\ufff5\025\ufff5\027\ufff5\041\ufff5\042" +
    "\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\030\002\010\003\012\004\013\005\020\006" +
    "\026\007\003\010\022\011\004\012\021\013\017\014\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\010\004\013\006\117\007\003" +
    "\010\022\011\004\012\021\013\017\014\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\010\004\013" +
    "\006\032\007\003\010\022\011\004\012\021\013\017\014" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\010\004\013\005\030\006\026\007\003" +
    "\010\022\011\004\012\021\013\017\014\016\001\001\000" +
    "\024\002\010\004\013\006\032\007\003\010\022\011\004" +
    "\012\021\013\017\014\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\040\016\037" +
    "\017\047\020\053\021\052\022\042\023\043\024\046\001" +
    "\001\000\006\023\116\024\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\103\015" +
    "\104\016\037\017\047\020\053\021\052\022\042\023\043" +
    "\024\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\076\024\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\075" +
    "\022\042\023\043\024\046\001\001\000\012\021\074\022" +
    "\042\023\043\024\046\001\001\000\012\021\073\022\042" +
    "\023\043\024\046\001\001\000\010\022\072\023\043\024" +
    "\046\001\001\000\010\022\063\023\043\024\046\001\001" +
    "\000\012\021\062\022\042\023\043\024\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\071\024\046" +
    "\001\001\000\006\023\070\024\046\001\001\000\006\023" +
    "\067\024\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\102\021\052\022\042\023\043\024\046\001\001\000" +
    "\014\020\101\021\052\022\042\023\043\024\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\107\017\047" +
    "\020\053\021\052\022\042\023\043\024\046\001\001\000" +
    "\002\001\001\000\016\017\111\020\053\021\052\022\042" +
    "\023\043\024\046\001\001\000\002\001\001\000\004\024" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\122\016\037\017\047\020\053\021\052" +
    "\022\042\023\043\024\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\126\016\037" +
    "\017\047\020\053\021\052\022\042\023\043\024\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\132\016\037\017\047\020\053\021\052\022" +
    "\042\023\043\024\046\001\001\000\002\001\001\000\024" +
    "\002\010\004\013\006\134\007\003\010\022\011\004\012" +
    "\021\013\017\014\016\001\001\000\002\001\001\000\024" +
    "\002\010\004\013\006\136\007\003\010\022\011\004\012" +
    "\021\013\017\014\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\142\016\037\017" +
    "\047\020\053\021\052\022\042\023\043\024\046\001\001" +
    "\000\002\001\001\000\024\002\010\004\013\006\144\007" +
    "\003\010\022\011\004\012\021\013\017\014\016\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmts 
            {
              Stmt RESULT =null;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ASTRoot.setRoot(stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Stmt start_val = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= SCOPE_START stmts SCOPE_END 
            {
              Stmt RESULT =null;
		Location stmtsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stmtsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Stmt stmts = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Scope(stmts);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmts stmt 
            {
              Stmt RESULT =null;
		Location stmtsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stmtsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Stmt stmts = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Stmts(stmts,new Stmts(stmt,null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= stmt 
            {
              Stmt RESULT =null;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = stmt;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= declaration 
            {
              Stmt RESULT =null;
		Location declarexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt declare = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = declare;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= assignment 
            {
              Stmt RESULT =null;
		Location assignxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location assignxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt assign = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = assign;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= single_if 
            {
              Stmt RESULT =null;
		Location _ifxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location _ifxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt _if = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = _if;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= if_else 
            {
              Stmt RESULT =null;
		Location if_elsexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location if_elsexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt if_else = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = if_else;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= single_while 
            {
              Stmt RESULT =null;
		Location _whilexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location _whilexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt _while = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = _while;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= do_while 
            {
              Stmt RESULT =null;
		Location do_whilexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location do_whilexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt do_while = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = do_while;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= PRINT BRACKET_LEFT bool BRACKET_RIGHT DELIMITER 
            {
              Stmt RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Print(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // single_while ::= WHILE BRACKET_LEFT bool BRACKET_RIGHT stmt 
            {
              Stmt RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new While(expr,stmt,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // assignment ::= ID ASSIGN bool DELIMITER 
            {
              Stmt RESULT =null;
		Location midxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location midxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object mid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Token token = (Token)mid;
    Id id = new Id(token, null, token.toString());
    RESULT = new Assign(id,expr);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= type ID DELIMITER 
            {
              Stmt RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location midxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location midxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object mid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Token token = (Token)mid;
    Id id = new Id(token,t, token.toString());
    RESULT = new Declare(id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // single_if ::= IF BRACKET_LEFT bool BRACKET_RIGHT stmt 
            {
              Stmt RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp,stmt,null,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_if",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if_else ::= IF BRACKET_LEFT bool BRACKET_RIGHT stmt ELSE stmt 
            {
              Stmt RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp,s1,s2,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_else",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // do_while ::= DO stmt WHILE BRACKET_LEFT bool BRACKET_RIGHT DELIMITER 
            {
              Stmt RESULT =null;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile(expr,stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= block 
            {
              Stmt RESULT =null;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Stmt block = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = block;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= error DELIMITER 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = Type.Int;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= REAL 
            {
              Type RESULT =null;
		RESULT = Type.Real;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = Type.Char;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool ::= join 
            {
              Expr RESULT =null;
		Location jnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location jnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr jn = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = jn;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool ::= bool OR join 
            {
              Expr RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr bl = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location jnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location jnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr jn = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Or((Token)tk,bl,jn);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // join ::= equality 
            {
              Expr RESULT =null;
		Location eqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr eq = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = eq;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("join",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // join ::= join AND equality 
            {
              Expr RESULT =null;
		Location jnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location jnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr jn = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location eqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location eqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr eq = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new And((Token)tk,jn,eq);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("join",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // equality ::= rel 
            {
              Expr RESULT =null;
		Location rlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr rl = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = rl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // equality ::= equality EQ rel 
            {
              Expr RESULT =null;
		Location eqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location eqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr eq = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr rl = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Equal((Token)tk,eq,rl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // equality ::= equality NEQ rel 
            {
              Expr RESULT =null;
		Location eqxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location eqxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr eq = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr rl = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new UnEqual((Token)tk,eq,rl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel ::= expr LESS_THAN expr 
            {
              Expr RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr exp1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr exp2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Less((Token)tk,exp1,exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel ::= expr GREATER_THAN expr 
            {
              Expr RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr exp1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr exp2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Greater((Token)tk,exp1,exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel ::= expr LESS_EQUAL expr 
            {
              Expr RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr exp1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr exp2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEqual((Token)tk,exp1,exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel ::= expr GREATER_EQUAL expr 
            {
              Expr RESULT =null;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr exp1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exp2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exp2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr exp2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEqual((Token)tk,exp1,exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel ::= expr 
            {
              Expr RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= term 
            {
              Expr RESULT =null;
		Location trmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location trmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr trm = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = trm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr MINUS term 
            {
              Expr RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location trmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location trmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr trm = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Minus((Token)tk,null,expr,trm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr ADD term 
            {
              Expr RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location trmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location trmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr trm = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Add((Token)tk,null,expr,trm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= unary 
            {
              Expr RESULT =null;
		Location aryxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aryxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr ary = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ary; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // term ::= term TIMES unary 
            {
              Expr RESULT =null;
		Location trmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location trmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr trm = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aryxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aryxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr ary = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Times((Token)tk,null,trm,ary); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= term DIVIDE unary 
            {
              Expr RESULT =null;
		Location trmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location trmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr trm = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aryxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aryxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr ary = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Divide((Token)tk,null,trm,ary); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // term ::= term MOD unary 
            {
              Expr RESULT =null;
		Location trmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location trmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expr trm = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aryxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aryxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr ary = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Mod((Token)tk,null,trm,ary);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unary ::= NOT unary 
            {
              Expr RESULT =null;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aryxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aryxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr ary = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not((Token)tk,ary);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unary ::= MINUS unary 
            {
              Expr RESULT =null;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aryxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aryxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr ary = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryMinus((Token)tk,ary); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unary ::= factor 
            {
              Expr RESULT =null;
		Location fctrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fctrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr fctr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fctr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= BRACKET_LEFT bool BRACKET_RIGHT 
            {
              Expr RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expr bl = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = bl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= ID 
            {
              Expr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Token token = (Token)id;
                RESULT = new Id(token,null,token.toString());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= INTNUM 
            {
              Expr RESULT =null;
		Location mintxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mintxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object mint = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Lexer.Token.Int token = (Lexer.Token.Int)mint;
                RESULT = new Int(token,token.value);

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= REALNUM 
            {
              Expr RESULT =null;
		Location realxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location realxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Lexer.Token.Real token = (Lexer.Token.Real)real;
                RESULT =  new Real(token,token.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= CHARNUM 
            {
              Expr RESULT =null;
		Location chxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Lexer.Token.Char token = (Lexer.Token.Char)ch;
                RESULT = new Char(token,token.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= BRACKET_LEFT type BRACKET_RIGHT factor 
            {
              Expr RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location tkxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tkxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tk = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Cast((Token)tk,type,expr);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
