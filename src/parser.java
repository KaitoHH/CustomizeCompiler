
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\004\004\000\002\004\003\000\002\005\005" +
    "\000\002\005\006\000\002\005\011\000\002\005\007\000" +
    "\002\005\007\000\002\005\011\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\003\000\002\007" +
    "\005\000\002\010\003\000\002\010\005\000\002\011\003" +
    "\000\002\011\005\000\002\011\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\013\003\000\002\013\005\000\002\013" +
    "\005\000\002\014\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\015\004\000\002\015\004\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\004\034\005\001\002\000\004\002\123\001" +
    "\002\000\020\006\010\007\017\010\014\012\007\013\020" +
    "\034\005\043\015\001\002\000\004\002\001\001\002\000" +
    "\004\037\117\001\002\000\004\043\ufff5\001\002\000\022" +
    "\006\010\007\017\010\014\012\007\013\020\034\005\035" +
    "\116\043\015\001\002\000\022\006\ufffd\007\ufffd\010\ufffd" +
    "\012\ufffd\013\ufffd\034\ufffd\035\ufffd\043\ufffd\001\002\000" +
    "\024\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\034\ufff6\035\ufff6\043\ufff6\001\002\000\004\037\107\001" +
    "\002\000\004\036\104\001\002\000\004\043\102\001\002" +
    "\000\004\043\ufff4\001\002\000\020\006\010\007\017\010" +
    "\014\012\007\013\020\034\005\043\015\001\002\000\004" +
    "\012\022\001\002\000\004\037\023\001\002\000\016\004" +
    "\040\005\025\020\024\032\037\037\027\043\033\001\002" +
    "\000\016\004\040\005\025\020\024\032\037\037\027\043" +
    "\033\001\002\000\040\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\033\uffda\040\uffda\041\uffda\042\uffda\001\002\000\012" +
    "\030\074\031\ufff3\040\ufff3\041\ufff3\001\002\000\016\004" +
    "\040\005\025\020\024\032\037\037\027\043\033\001\002" +
    "\000\006\031\072\040\071\001\002\000\040\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\033\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\001\002\000\040\017\uffe7\020\uffe7\021\055\022\054" +
    "\023\053\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\033\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\040" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\001\002\000\040\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\033\uffde\040\uffde\041\uffde\042\uffde\001" +
    "\002\000\016\030\ufff1\031\ufff1\033\065\040\ufff1\041\ufff1" +
    "\042\066\001\002\000\032\017\046\020\047\024\043\025" +
    "\044\026\050\027\045\030\uffe8\031\uffe8\033\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\001\002\000\016\004\040\005\025\020" +
    "\024\032\037\037\027\043\033\001\002\000\040\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\001\002\000\016\030\uffef\031\uffef\033\uffef\040" +
    "\uffef\041\uffef\042\uffef\001\002\000\040\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\033\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\001\002\000\016\004\040\005\025\020\024\032\037\037" +
    "\027\043\033\001\002\000\016\004\040\005\025\020\024" +
    "\032\037\037\027\043\033\001\002\000\016\004\040\005" +
    "\025\020\024\032\037\037\027\043\033\001\002\000\016" +
    "\004\040\005\025\020\024\032\037\037\027\043\033\001" +
    "\002\000\016\004\040\005\025\020\024\032\037\037\027" +
    "\043\033\001\002\000\016\004\040\005\025\020\024\032" +
    "\037\037\027\043\033\001\002\000\022\017\046\020\047" +
    "\030\uffea\031\uffea\033\uffea\040\uffea\041\uffea\042\uffea\001" +
    "\002\000\040\017\uffe6\020\uffe6\021\055\022\054\023\053" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\033" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002\000\016\004\040" +
    "\005\025\020\024\032\037\037\027\043\033\001\002\000" +
    "\016\004\040\005\025\020\024\032\037\037\027\043\033" +
    "\001\002\000\016\004\040\005\025\020\024\032\037\037" +
    "\027\043\033\001\002\000\040\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\033\uffe3\040\uffe3\041\uffe3\042\uffe3\001\002" +
    "\000\040\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\001\002\000\040\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\033\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\001\002\000\040\017\uffe5\020\uffe5\021\055\022\054" +
    "\023\053\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\033\uffe5\040\uffe5\041\uffe5\042\uffe5\001\002\000\022" +
    "\017\046\020\047\030\uffe9\031\uffe9\033\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\001\002\000\022\017\046\020\047\030\uffeb" +
    "\031\uffeb\033\uffeb\040\uffeb\041\uffeb\042\uffeb\001\002\000" +
    "\022\017\046\020\047\030\uffec\031\uffec\033\uffec\040\uffec" +
    "\041\uffec\042\uffec\001\002\000\016\004\040\005\025\020" +
    "\024\032\037\037\027\043\033\001\002\000\016\004\040" +
    "\005\025\020\024\032\037\037\027\043\033\001\002\000" +
    "\016\030\uffed\031\uffed\033\uffed\040\uffed\041\uffed\042\uffed" +
    "\001\002\000\016\030\uffee\031\uffee\033\uffee\040\uffee\041" +
    "\uffee\042\uffee\001\002\000\004\041\076\001\002\000\016" +
    "\004\040\005\025\020\024\032\037\037\027\043\033\001" +
    "\002\000\012\030\074\031\ufff2\040\ufff2\041\ufff2\001\002" +
    "\000\016\004\040\005\025\020\024\032\037\037\027\043" +
    "\033\001\002\000\016\030\ufff0\031\ufff0\033\065\040\ufff0" +
    "\041\ufff0\042\066\001\002\000\024\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\034\ufff7\035\ufff7\043\ufff7" +
    "\001\002\000\006\031\072\040\100\001\002\000\040\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\001\002\000\040\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\033\uffdf\040\uffdf\041\uffdf\042\uffdf\001\002" +
    "\000\004\041\103\001\002\000\024\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\034\ufffc\035\ufffc\043\ufffc" +
    "\001\002\000\016\004\040\005\025\020\024\032\037\037" +
    "\027\043\033\001\002\000\006\031\072\041\106\001\002" +
    "\000\024\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\034\ufffb\035\ufffb\043\ufffb\001\002\000\016\004\040" +
    "\005\025\020\024\032\037\037\027\043\033\001\002\000" +
    "\006\031\072\040\111\001\002\000\020\006\010\007\017" +
    "\010\014\012\007\013\020\034\005\043\015\001\002\000" +
    "\024\006\ufff9\007\ufff9\010\ufff9\011\113\012\ufff9\013\ufff9" +
    "\034\ufff9\035\ufff9\043\ufff9\001\002\000\020\006\010\007" +
    "\017\010\014\012\007\013\020\034\005\043\015\001\002" +
    "\000\024\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\034\ufffa\035\ufffa\043\ufffa\001\002\000\022\006\ufffe" +
    "\007\ufffe\010\ufffe\012\ufffe\013\ufffe\034\ufffe\035\ufffe\043" +
    "\ufffe\001\002\000\026\002\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\012\uffff\013\uffff\034\uffff\035\uffff\043\uffff\001" +
    "\002\000\016\004\040\005\025\020\024\032\037\037\027" +
    "\043\033\001\002\000\006\031\072\040\121\001\002\000" +
    "\020\006\010\007\017\010\014\012\007\013\020\034\005" +
    "\043\015\001\002\000\024\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\034\ufff8\035\ufff8\043\ufff8\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\012\003\012\004\010\005\011\006\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\012\005\114\006\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\012\005\020" +
    "\006\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\027\010\025\011\034\012\040\013\035\014\031" +
    "\015\030\016\033\001\001\000\006\015\100\016\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\076" +
    "\010\025\011\034\012\040\013\035\014\031\015\030\016" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\041\016\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\063\014\031\015\030\016\033\001\001\000\012" +
    "\013\062\014\031\015\030\016\033\001\001\000\012\013" +
    "\061\014\031\015\030\016\033\001\001\000\010\014\060" +
    "\015\030\016\033\001\001\000\010\014\051\015\030\016" +
    "\033\001\001\000\012\013\050\014\031\015\030\016\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\057\016\033\001\001\000\006\015\056\016\033\001\001" +
    "\000\006\015\055\016\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\067\013\035\014\031\015\030\016\033\001\001\000\014" +
    "\012\066\013\035\014\031\015\030\016\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\072\011\034\012\040\013\035\014\031\015\030\016" +
    "\033\001\001\000\002\001\001\000\016\011\074\012\040" +
    "\013\035\014\031\015\030\016\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\104\010\025\011\034\012\040\013\035\014\031" +
    "\015\030\016\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\107\010\025\011\034\012\040\013\035" +
    "\014\031\015\030\016\033\001\001\000\002\001\001\000" +
    "\010\003\012\005\111\006\015\001\001\000\002\001\001" +
    "\000\010\003\012\005\113\006\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\117" +
    "\010\025\011\034\012\040\013\035\014\031\015\030\016" +
    "\033\001\001\000\002\001\001\000\010\003\012\005\121" +
    "\006\015\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= SCOPE_START stmts SCOPE_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmts stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= type ID DELIMITER 
            {
              Object RESULT =null;
		System.out.println("declare");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= ID ASSIGN bool DELIMITER 
            {
              Object RESULT =null;
		System.out.println("assign");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= IF BRACKET_LEFT bool BRACKET_RIGHT stmt ELSE stmt 
            {
              Object RESULT =null;
		System.out.println("if-else");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= IF BRACKET_LEFT bool BRACKET_RIGHT stmt 
            {
              Object RESULT =null;
		System.out.println("if");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= WHILE BRACKET_LEFT bool BRACKET_RIGHT stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= DO stmt WHILE BRACKET_LEFT bool BRACKET_RIGHT DELIMITER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bool ::= join 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bool ::= bool OR join 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // join ::= equality 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("join",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // join ::= join AND equality 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("join",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // equality ::= rel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // equality ::= equality EQ rel 
            {
              Object RESULT =null;
		System.out.println("eq");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // equality ::= equality NEQ rel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rel ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rel ::= expr GREATER_THAN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rel ::= expr LESS_EQUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rel ::= expr GREATER_EQUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rel ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MINUS term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr ADD term 
            {
              Object RESULT =null;
		System.out.println("add");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= unary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= term TIMES unary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= term DIVIDE unary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= term MOD unary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unary ::= NOT unary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unary ::= MINUS unary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unary ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= BRACKET_LEFT bool BRACKET_RIGHT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= INTNUM 
            {
              Object RESULT =null;
		System.out.println("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= REALNUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
