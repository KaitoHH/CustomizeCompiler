import java_cup.runtime.*;
import Syntax.AST.Basic.*;
import Lexer.Token.Tag;
import Syntax.AST.Expressions.Arith.*;
import Syntax.AST.Expressions.Logic.*;
import Syntax.AST.ASTRoot;
import Syntax.AST.Statements.*;
import Syntax.AST.Type;
import Lexer.Token.Token;
import Syntax.AST.Expressions.*;
import Syntax.AST.Statements.Stmt;

class Parser;

/* Terminals stub#01 */
terminal           INTNUM,REALNUM,CHARNUM,CASTRIGHT;


/* Non-terminals stub#02 */
non terminal Type  type;

non terminal Stmt  program,block,stmts,stmt,declaration,assignment,single_if,if_else,single_while,do_while;
non terminal Expr  bool,join,equality,rel,expr,term,unary,factor;

precedence left    ELSE;
precedence left    CASTRIGHT;



/* The grammar */
program ::= stmts:stmt
            {:ASTRoot.setRoot(stmt);:};

block   ::= SCOPE_START stmts:stmts SCOPE_END
            {:RESULT = new Scope(stmts);:}
            ;


stmts   ::= stmts:stmts stmt:stmt
            {:RESULT = new Stmts(stmts,new Stmts(stmt,null));:}
        |
            stmt:stmt
            {:RESULT = stmt;:}
        ;
stmt    ::=
            declaration:declare
            {:RESULT = declare;:}
        |
            assignment :assign
            {:RESULT = assign;:}
        |
            single_if:_if
            {:RESULT = _if;:}
        |
            if_else:if_else
            {:RESULT = if_else;:}
        |
            single_while:_while
            {:RESULT = _while;:}
        |
            do_while:do_while
            {:RESULT = do_while;:}
        |
            PRINT BRACKET_LEFT bool:expr BRACKET_RIGHT DELIMITER
            {:RESULT = new Print(expr);:}
        ;

/*single_while*/
{:RESULT = new While(expr,stmt,false);:};

/*assignment*/
{:
    Token token = (Token)mid;
    Id id = new Id(token, null, token.toString());
    RESULT = new Assign(id,expr);
:};

/*declaration*/
{:
    Token token = (Token)mid;
    Id id = new Id(token,t, token.toString());
    RESULT = new Declare(id);
:};

/*single_if*/
{:RESULT = new If(exp,stmt,null,false);:};

/*if_else*/
{:RESULT = new If(exp,s1,s2,false);:};

/*do_while*/
{:RESULT = new DoWhile(expr,stmt);:};

stmt    ::=
            block:block
            {:RESULT = block;:}
        |
            error DELIMITER
        ;
type   ::=  INT
            {:RESULT = Type.Int;:}
        |
            REAL
            {:RESULT = Type.Real;:}
        |
            CHAR
            {:RESULT = Type.Char;:}
        ;
bool   ::= join:jn
            {:RESULT = jn;:}
        |
            bool:bl OR:tk join:jn
            {:RESULT = new Or((Token)tk,bl,jn);:}
        ;
join   ::= equality:eq
            {:RESULT = eq;:}
        |
            join:jn AND:tk equality:eq
            {:RESULT = new And((Token)tk,jn,eq);:}
        ;
equality::= rel:rl
            {:RESULT = rl;:}
        |
            equality:eq EQ:tk rel:rl
            {:RESULT = new Equal((Token)tk,eq,rl);:}

        |
            equality:eq NEQ:tk rel:rl
            {:RESULT = new UnEqual((Token)tk,eq,rl);:}
        ;
rel    ::= expr:exp1 LESS_THAN:tk expr:exp2
           {: RESULT = new Less((Token)tk,exp1,exp2);:}
        |
            expr:exp1 GREATER_THAN:tk expr:exp2
            {: RESULT = new Greater((Token)tk,exp1,exp2);:}
        |
            expr:exp1 LESS_EQUAL:tk expr:exp2
            {: RESULT = new LessEqual((Token)tk,exp1,exp2);:}
        |
            expr:exp1 GREATER_EQUAL:tk expr:exp2
            {: RESULT = new GreaterEqual((Token)tk,exp1,exp2);:}
        |
            expr:exp
            {:RESULT = exp;:}
        ;
expr   ::= term:trm
            {:RESULT = trm;:}
        |
            expr:expr MINUS:tk term:trm
            {:RESULT = new Minus((Token)tk,null,expr,trm);:}
        |
            expr:expr ADD:tk term:trm
            {:RESULT = new Add((Token)tk,null,expr,trm);:}
        ;

term   ::= unary:ary
        {: RESULT = ary; :}
        |
            term:trm TIMES:tk unary:ary
            {: RESULT = new Times((Token)tk,null,trm,ary); :}
        |
            term:trm DIVIDE:tk unary:ary
            {: RESULT = new Divide((Token)tk,null,trm,ary); :}
        |
            term:trm MOD:tk unary:ary
            {:
                RESULT = new Mod((Token)tk,null,trm,ary);
            :}
        ;
unary  ::= NOT:tk unary : ary
            {: RESULT = new Not((Token)tk,ary);:}
        |
            MINUS:tk unary : ary
            {: RESULT = new UnaryMinus((Token)tk,ary); :}
        |
            factor:fctr
            {: RESULT = fctr; :}
        ;

factor ::= BRACKET_LEFT bool:bl BRACKET_RIGHT
            {: RESULT = bl;:}
        |
            ID : id
            {:
                Token token = (Token)id;
                RESULT = new Id(token,null,token.toString());
            :}
        |
            INTNUM : mint
            {:
                Lexer.Token.Int token = (Lexer.Token.Int)mint;
                RESULT = new Int(token,token.value);

            :}
        |
            REALNUM : real
            {:
                Lexer.Token.Real token = (Lexer.Token.Real)real;
                RESULT =  new Real(token,token.value);
            :}
        |
            CHARNUM : ch
            {:
                Lexer.Token.Char token = (Lexer.Token.Char)ch;
                RESULT = new Char(token,token.value);
            :}
        |
            BRACKET_LEFT type:type BRACKET_RIGHT:tk  factor:expr
            {:RESULT = new Cast((Token)tk,type,expr);
            :}%prec CASTRIGHT
        ;
